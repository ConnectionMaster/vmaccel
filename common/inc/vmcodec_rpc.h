/******************************************************************************

Copyright (c) 2019 VMware, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _VMCODEC_RPC_H_RPCGEN
#ifdef __cplusplus
extern "C" {
#endif
#define _VMCODEC_RPC_H_RPCGEN

#include <rpc/rpc.h>

#include "vmaccel_rpc.h"
#include "vmcodec_defs.h"

typedef u_int VMCODECCaps;

typedef VMAccelId VMCODECContextId;

struct VMCODECContextAllocateDesc {
   VMAccelId accelId;
   VMCODECContextId clientId;
   VMAccelSelectionMask selectionMask;
   u_int codec;
   VMCODECCaps requiredCaps;
   VMAccelWorkloadDesc decodeThroughput;
   VMAccelWorkloadDesc encodeThroughput;
   VMAccelCoordinate3DUINT frameSizePixels;
};
typedef struct VMCODECContextAllocateDesc VMCODECContextAllocateDesc;

struct VMCODECContextAllocateStatus {
   VMAccelStatusCode status;
   VMCODECCaps caps;
};
typedef struct VMCODECContextAllocateStatus VMCODECContextAllocateStatus;

struct VMCODECSurfaceId {
   VMCODECContextId cid;
   VMAccelSurfaceId accel;
};
typedef struct VMCODECSurfaceId VMCODECSurfaceId;

struct VMCODECSurfaceAllocateDesc {
   VMAccelSurfaceId client;
   VMAccelSurfaceDesc desc;
};
typedef struct VMCODECSurfaceAllocateDesc VMCODECSurfaceAllocateDesc;

struct VMCODECImageUploadOp {
   VMCODECSurfaceId img;
   VMAccelImageTransferOp op;
   VMAccelSurfaceWriteConsistency mode;
};
typedef struct VMCODECImageUploadOp VMCODECImageUploadOp;

struct VMCODECImageDownloadOp {
   VMCODECSurfaceId img;
   VMAccelImageTransferOp op;
   VMAccelSurfaceReadConsistency mode;
};
typedef struct VMCODECImageDownloadOp VMCODECImageDownloadOp;

struct VMCODECArg {
   VMCODECSurfaceId sid;
   VMAccelSurfaceRegion imgRegion;
};
typedef struct VMCODECArg VMCODECArg;

struct VMCODECDecodeOp {
   VMCODECContextId cid;
   struct {
      u_int output_len;
      VMCODECArg *output_val;
   } output;
};
typedef struct VMCODECDecodeOp VMCODECDecodeOp;

struct VMCODECEncodeOp {
   VMCODECContextId cid;
   struct {
      u_int inptut_len;
      VMCODECArg *inptut_val;
   } inptut;
};
typedef struct VMCODECEncodeOp VMCODECEncodeOp;

struct VMCODECContextAllocateReturnStatus {
   int errno;
   union {
      VMCODECContextAllocateStatus *ret;
   } VMCODECContextAllocateReturnStatus_u;
};
typedef struct VMCODECContextAllocateReturnStatus
   VMCODECContextAllocateReturnStatus;

#define VMCODEC 0x20000082
#define VMCODEC_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define VMCODEC_CONTEXTALLOC 1
VMCODECContextAllocateReturnStatus *
vmcodec_contextalloc_1(VMCODECContextAllocateDesc *, CLIENT *);
VMCODECContextAllocateReturnStatus *
vmcodec_contextalloc_1_svc(VMCODECContextAllocateDesc *, struct svc_req *);
#define VMCODEC_CONTEXTDESTROY 2
VMAccelReturnStatus *vmcodec_contextdestroy_1(VMCODECContextId *, CLIENT *);
VMAccelReturnStatus *vmcodec_contextdestroy_1_svc(VMCODECContextId *,
                                                  struct svc_req *);
#define VMCODEC_SURFACEALLOC 3
VMAccelSurfaceAllocateReturnStatus *
vmcodec_surfacealloc_1(VMCODECSurfaceAllocateDesc *, CLIENT *);
VMAccelSurfaceAllocateReturnStatus *
vmcodec_surfacealloc_1_svc(VMCODECSurfaceAllocateDesc *, struct svc_req *);
#define VMCODEC_SURFACEDESTROY 4
VMAccelReturnStatus *vmcodec_surfacedestroy_1(VMCODECSurfaceId *, CLIENT *);
VMAccelReturnStatus *vmcodec_surfacedestroy_1_svc(VMCODECSurfaceId *,
                                                  struct svc_req *);
#define VMCODEC_IMAGEUPLOAD 5
VMAccelReturnStatus *vmcodec_imageupload_1(VMCODECImageUploadOp *, CLIENT *);
VMAccelReturnStatus *vmcodec_imageupload_1_svc(VMCODECImageUploadOp *,
                                               struct svc_req *);
#define VMCODEC_IMAGEDOWNLOAD 6
VMAccelDownloadReturnStatus *vmcodec_imagedownload_1(VMCODECImageDownloadOp *,
                                                     CLIENT *);
VMAccelDownloadReturnStatus *
vmcodec_imagedownload_1_svc(VMCODECImageDownloadOp *, struct svc_req *);
#define VMCODEC_DECODE 7
VMAccelReturnStatus *vmcodec_decode_1(VMCODECDecodeOp *, CLIENT *);
VMAccelReturnStatus *vmcodec_decode_1_svc(VMCODECDecodeOp *, struct svc_req *);
#define VMCODEC_ENCODE 8
VMAccelReturnStatus *vmcodec_encode_1(VMCODECEncodeOp *, CLIENT *);
VMAccelReturnStatus *vmcodec_encode_1_svc(VMCODECEncodeOp *, struct svc_req *);
int vmcodec_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define VMCODEC_CONTEXTALLOC 1
VMCODECContextAllocateReturnStatus *vmcodec_contextalloc_1();
VMCODECContextAllocateReturnStatus *vmcodec_contextalloc_1_svc();
#define VMCODEC_CONTEXTDESTROY 2
VMAccelReturnStatus *vmcodec_contextdestroy_1();
VMAccelReturnStatus *vmcodec_contextdestroy_1_svc();
#define VMCODEC_SURFACEALLOC 3
VMAccelSurfaceAllocateReturnStatus *vmcodec_surfacealloc_1();
VMAccelSurfaceAllocateReturnStatus *vmcodec_surfacealloc_1_svc();
#define VMCODEC_SURFACEDESTROY 4
VMAccelReturnStatus *vmcodec_surfacedestroy_1();
VMAccelReturnStatus *vmcodec_surfacedestroy_1_svc();
#define VMCODEC_IMAGEUPLOAD 5
VMAccelReturnStatus *vmcodec_imageupload_1();
VMAccelReturnStatus *vmcodec_imageupload_1_svc();
#define VMCODEC_IMAGEDOWNLOAD 6
VMAccelDownloadReturnStatus *vmcodec_imagedownload_1();
VMAccelDownloadReturnStatus *vmcodec_imagedownload_1_svc();
#define VMCODEC_DECODE 7
VMAccelReturnStatus *vmcodec_decode_1();
VMAccelReturnStatus *vmcodec_decode_1_svc();
#define VMCODEC_ENCODE 8
VMAccelReturnStatus *vmcodec_encode_1();
VMAccelReturnStatus *vmcodec_encode_1_svc();
int vmcodec_1_freeresult();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
bool_t xdr_VMCODECCaps(XDR *, VMCODECCaps *);
bool_t xdr_VMCODECContextId(XDR *, VMCODECContextId *);
bool_t xdr_VMCODECContextAllocateDesc(XDR *, VMCODECContextAllocateDesc *);
bool_t xdr_VMCODECContextAllocateStatus(XDR *, VMCODECContextAllocateStatus *);
bool_t xdr_VMCODECSurfaceId(XDR *, VMCODECSurfaceId *);
bool_t xdr_VMCODECSurfaceAllocateDesc(XDR *, VMCODECSurfaceAllocateDesc *);
bool_t xdr_VMCODECImageUploadOp(XDR *, VMCODECImageUploadOp *);
bool_t xdr_VMCODECImageDownloadOp(XDR *, VMCODECImageDownloadOp *);
bool_t xdr_VMCODECArg(XDR *, VMCODECArg *);
bool_t xdr_VMCODECDecodeOp(XDR *, VMCODECDecodeOp *);
bool_t xdr_VMCODECEncodeOp(XDR *, VMCODECEncodeOp *);
bool_t
xdr_VMCODECContextAllocateReturnStatus(XDR *,
                                       VMCODECContextAllocateReturnStatus *);

#else /* K&R C */
bool_t xdr_VMCODECCaps();
bool_t xdr_VMCODECContextId();
bool_t xdr_VMCODECContextAllocateDesc();
bool_t xdr_VMCODECContextAllocateStatus();
bool_t xdr_VMCODECSurfaceId();
bool_t xdr_VMCODECSurfaceAllocateDesc();
bool_t xdr_VMCODECImageUploadOp();
bool_t xdr_VMCODECImageDownloadOp();
bool_t xdr_VMCODECArg();
bool_t xdr_VMCODECDecodeOp();
bool_t xdr_VMCODECEncodeOp();
bool_t xdr_VMCODECContextAllocateReturnStatus();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_VMCODEC_RPC_H_RPCGEN */
