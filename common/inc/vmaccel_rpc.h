/******************************************************************************

Copyright (c) 2016-2019 VMware, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _VMACCEL_RPC_H_RPCGEN
#define _VMACCEL_RPC_H_RPCGEN

#include <rpc/rpc.h>

#include "vmaccel_defs.h"
#define VMACCEL_MAX_NONCE_SIZE 4
#define VMACCEL_MAX_LOCATION_SIZE 4

typedef u_int VMAccelStatusCode;

typedef u_int VMAccelResourceType;

typedef u_int VMAccelArchitectureType;

typedef u_int VMAccelSelectionMask;

typedef u_int VMAccelId;

typedef u_int VMAccelCaps;

typedef u_int VMAccelSurfaceType;

typedef u_int VMAccelSurfaceUsage;

typedef u_int VMAccelSurfaceMapFlags;

typedef u_int VMAccelSurfaceReadConsistency;

typedef u_int VMAccelSurfaceWriteConsistency;

typedef u_int VMAccelFormatCaps;

typedef u_int VMAccelSurfaceBindFlags;

typedef u_int VMAccelSurfaceFormat;

typedef u_int VMAccelSurfaceFormatCaps;

struct VMAccelStatus {
   struct {
      u_int nonce_len;
      char *nonce_val;
   } nonce;
   VMAccelStatusCode status;
};
typedef struct VMAccelStatus VMAccelStatus;

struct VMAccelAddress {
   struct {
      u_int addr_len;
      char *addr_val;
   } addr;
   u_int port;
   VMAccelResourceType resourceTypeMask;
};
typedef struct VMAccelAddress VMAccelAddress;

struct VMAccelCallback {
   VMAccelAddress addr;
   struct {
      u_int payload_len;
      char *payload_val;
   } payload;
};
typedef struct VMAccelCallback VMAccelCallback;

struct VMAccelFormatDesc {
   u_int format;
   VMAccelFormatCaps caps;
};
typedef struct VMAccelFormatDesc VMAccelFormatDesc;

struct VMAccelWorkloadDesc {
   u_int megaFlops;
   u_int megaOps;
   u_int llcSizeKB;
   u_int llcBandwidthMBSec;
   u_int localMemSizeKB;
   u_int localMemBandwidthMBSec;
   u_int nonLocalMemSizeKB;
   u_int nonLocalMemBandwidthMBSec;
   u_int interconnectBandwidthMBSec;
};
typedef struct VMAccelWorkloadDesc VMAccelWorkloadDesc;

struct VMAccelDesc {
   VMAccelId parentId;
   VMAccelAddress parentAddr;
   VMAccelResourceType typeMask;
   VMAccelArchitectureType architecture;
   VMAccelCaps caps;
   struct {
      u_int formatCaps_len;
      VMAccelFormatDesc *formatCaps_val;
   } formatCaps;
   VMAccelWorkloadDesc capacity;
   u_int maxContexts;
   u_int maxQueues;
   u_int maxEvents;
   u_int maxFences;
   u_int maxSurfaces;
   u_int maxMappings;
};
typedef struct VMAccelDesc VMAccelDesc;

struct VMAccelResourceDesc {
   VMAccelId parentId;
   VMAccelAddress parentAddr;
   VMAccelResourceType typeMask;
   VMAccelSelectionMask selectionMask;
   VMAccelCaps caps;
   u_int num;
   u_int size;
};
typedef struct VMAccelResourceDesc VMAccelResourceDesc;

struct VMAccelAllocateStatus {
   VMAccelStatusCode status;
   VMAccelId id;
   VMAccelDesc desc;
};
typedef struct VMAccelAllocateStatus VMAccelAllocateStatus;

struct VMAccelRegisterDesc {
   VMAccelDesc desc;
   VMAccelResourceType typeMask;
};
typedef struct VMAccelRegisterDesc VMAccelRegisterDesc;

struct VMAccelResourceAllocateStatus {
   VMAccelStatusCode status;
   VMAccelId id;
};
typedef struct VMAccelResourceAllocateStatus VMAccelResourceAllocateStatus;

struct VMAccelRegisterAllocationDesc {
   VMAccelAddress parentAddr;
   VMAccelResourceType typeMask;
   u_int num;
   u_int size;
};
typedef struct VMAccelRegisterAllocationDesc VMAccelRegisterAllocationDesc;

struct VMAccelRegisterStatus {
   VMAccelStatusCode status;
   VMAccelId id;
};
typedef struct VMAccelRegisterStatus VMAccelRegisterStatus;

struct VMAccelElementDouble4D {
   double x;
   double y;
   double z;
   double w;
};
typedef struct VMAccelElementDouble4D VMAccelElementDouble4D;

struct VMAccelElementFloat4D {
   float x;
   float y;
   float z;
   float w;
};
typedef struct VMAccelElementFloat4D VMAccelElementFloat4D;

struct VMAccelElementUINT4D {
   u_int r;
   u_int g;
   u_int b;
   u_int a;
};
typedef struct VMAccelElementUINT4D VMAccelElementUINT4D;

struct VMAccelCoordinate2DUINT {
   u_int x;
   u_int y;
};
typedef struct VMAccelCoordinate2DUINT VMAccelCoordinate2DUINT;

struct VMAccelCoordinate3DUINT {
   u_int x;
   u_int y;
   u_int z;
};
typedef struct VMAccelCoordinate3DUINT VMAccelCoordinate3DUINT;

struct VMAccelCoordinate4DUINT {
   u_int x;
   u_int y;
   u_int z;
   u_int w;
};
typedef struct VMAccelCoordinate4DUINT VMAccelCoordinate4DUINT;

struct VMAccelSurfaceDesc {
   VMAccelId parentId;
   VMAccelSurfaceType type;
   u_int width;
   u_int height;
   u_int depth;
   u_int mipLevels;
   u_int arraySize;
   u_int samples;
   VMAccelSurfaceFormat format;
   VMAccelSurfaceFormatCaps formatCaps;
   VMAccelSurfaceUsage usage;
   VMAccelSurfaceBindFlags bindFlags;
   u_int slicePitch;
   u_int rowPitch;
};
typedef struct VMAccelSurfaceDesc VMAccelSurfaceDesc;

typedef u_int VMAccelHandleType;

struct VMAccelSurfaceId {
   VMAccelSurfaceType type;
   VMAccelHandleType handleType;
   VMAccelId id;
};
typedef struct VMAccelSurfaceId VMAccelSurfaceId;

struct VMAccelSurfaceAllocateStatus {
   VMAccelStatusCode status;
   VMAccelSurfaceDesc surfaceDesc;
};
typedef struct VMAccelSurfaceAllocateStatus VMAccelSurfaceAllocateStatus;

struct VMAccelSharedHandleStatus {
   VMAccelStatusCode status;
   VMAccelSurfaceId shared;
};
typedef struct VMAccelSharedHandleStatus VMAccelSharedHandleStatus;

typedef u_int VMAccelQueueFlags;

struct VMAccelQueueDesc {
   VMAccelQueueFlags flags;
   u_int size;
};
typedef struct VMAccelQueueDesc VMAccelQueueDesc;

struct VMAccelQueueStatus {
   VMAccelStatusCode status;
};
typedef struct VMAccelQueueStatus VMAccelQueueStatus;

typedef u_int VMAccelEnqueuedStatusCode;

typedef u_int VMAccelEventType;

typedef VMAccelId VMAccelEventId;

struct VMAccelEventDesc {
   VMAccelEventType type;
   struct {
      u_int callbacks_len;
      VMAccelCallback *callbacks_val;
   } callbacks;
};
typedef struct VMAccelEventDesc VMAccelEventDesc;

struct VMAccelEventStatus {
   VMAccelStatusCode status;
   VMAccelEnqueuedStatusCode eventStatus;
};
typedef struct VMAccelEventStatus VMAccelEventStatus;

typedef u_int VMAccelFenceType;

struct VMAccelFenceDesc {
   VMAccelFenceType type;
   VMAccelSurfaceId notifyMemory;
   VMAccelCoordinate3DUINT elementLocation;
   u_int markerValue;
};
typedef struct VMAccelFenceDesc VMAccelFenceDesc;

struct VMAccelFenceStatus {
   VMAccelStatusCode status;
   VMAccelEnqueuedStatusCode fenceStatus;
   VMAccelId id;
};
typedef struct VMAccelFenceStatus VMAccelFenceStatus;

struct VMAccelSurfaceRegion {
   u_int mipLevel;
   VMAccelCoordinate3DUINT coord;
   VMAccelCoordinate3DUINT size;
};
typedef struct VMAccelSurfaceRegion VMAccelSurfaceRegion;

struct VMAccelSurfaceCopyOp {
   VMAccelSurfaceRegion dstRegion;
   VMAccelSurfaceRegion srcRegion;
};
typedef struct VMAccelSurfaceCopyOp VMAccelSurfaceCopyOp;

struct VMAccelImageFillOp {
   VMAccelSurfaceRegion dstRegion;
   VMAccelElementDouble4D d;
   VMAccelElementFloat4D f;
   VMAccelElementUINT4D u;
};
typedef struct VMAccelImageFillOp VMAccelImageFillOp;

struct VMAccelImageTransferOp {
   VMAccelSurfaceRegion imgRegion;
   struct {
      u_int ptr_len;
      char *ptr_val;
   } ptr;
   struct {
      u_int callbacks_len;
      VMAccelCallback *callbacks_val;
   } callbacks;
};
typedef struct VMAccelImageTransferOp VMAccelImageTransferOp;

struct VMAccelDMAStatus {
   VMAccelStatusCode status;
   VMAccelId fence;
};
typedef struct VMAccelDMAStatus VMAccelDMAStatus;

struct VMAccelDownloadStatus {
   VMAccelStatusCode status;
   VMAccelId fence;
   struct {
      u_int ptr_len;
      char *ptr_val;
   } ptr;
};
typedef struct VMAccelDownloadStatus VMAccelDownloadStatus;

struct VMAccelSurfaceMapOp {
   VMAccelSurfaceId surf;
   VMAccelCoordinate3DUINT coord;
   VMAccelCoordinate2DUINT size;
   VMAccelSurfaceMapFlags mapFlags;
};
typedef struct VMAccelSurfaceMapOp VMAccelSurfaceMapOp;

struct VMAccelSurfaceUnmapOp {
   VMAccelSurfaceId surf;
   struct {
      u_int ptr_len;
      char *ptr_val;
   } ptr;
};
typedef struct VMAccelSurfaceUnmapOp VMAccelSurfaceUnmapOp;

struct VMAccelSurfaceMapStatus {
   VMAccelStatusCode status;
   struct {
      u_int ptr_len;
      char *ptr_val;
   } ptr;
};
typedef struct VMAccelSurfaceMapStatus VMAccelSurfaceMapStatus;

struct VMAccelComputeArgDesc {
   u_int index;
   VMAccelSurfaceUsage usage;
   VMAccelSurfaceId surf;
   struct {
      u_int data_len;
      char *data_val;
   } data;
};
typedef struct VMAccelComputeArgDesc VMAccelComputeArgDesc;

struct VMAccelComputeOp {
   u_int kernelType;
   struct {
      u_int kernelSource_len;
      char *kernelSource_val;
   } kernelSource;
   struct {
      u_int kernelBinary32_len;
      char *kernelBinary32_val;
   } kernelBinary32;
   struct {
      u_int kernelBinary64_len;
      char *kernelBinary64_val;
   } kernelBinary64;
   struct {
      u_int kernelName_len;
      char *kernelName_val;
   } kernelName;
   u_int dimension;
   struct {
      u_int globalWorkOffset_len;
      u_int *globalWorkOffset_val;
   } globalWorkOffset;
   struct {
      u_int globalWorkSize_len;
      u_int *globalWorkSize_val;
   } globalWorkSize;
   struct {
      u_int localWorkSize_len;
      u_int *localWorkSize_val;
   } localWorkSize;
   struct {
      u_int args_len;
      VMAccelComputeArgDesc *args_val;
   } args;
};
typedef struct VMAccelComputeOp VMAccelComputeOp;

struct VMAccelComputeStatus {
   VMAccelStatusCode status;
   struct {
      u_int outputs_len;
      VMAccelComputeArgDesc *outputs_val;
   } outputs;
};
typedef struct VMAccelComputeStatus VMAccelComputeStatus;

struct VMAccelReturnStatus {
   int errno;
   union {
      VMAccelStatus *ret;
   } VMAccelReturnStatus_u;
};
typedef struct VMAccelReturnStatus VMAccelReturnStatus;

struct VMAccelAllocateReturnStatus {
   int errno;
   union {
      VMAccelAllocateStatus *ret;
   } VMAccelAllocateReturnStatus_u;
};
typedef struct VMAccelAllocateReturnStatus VMAccelAllocateReturnStatus;

struct VMAccelResourceAllocateReturnStatus {
   int errno;
   union {
      VMAccelResourceAllocateStatus *ret;
   } VMAccelResourceAllocateReturnStatus_u;
};
typedef struct VMAccelResourceAllocateReturnStatus
   VMAccelResourceAllocateReturnStatus;

struct VMAccelRegisterReturnStatus {
   int errno;
   union {
      VMAccelRegisterStatus *ret;
   } VMAccelRegisterReturnStatus_u;
};
typedef struct VMAccelRegisterReturnStatus VMAccelRegisterReturnStatus;

struct VMAccelQueueReturnStatus {
   int errno;
   union {
      VMAccelQueueStatus *ret;
   } VMAccelQueueReturnStatus_u;
};
typedef struct VMAccelQueueReturnStatus VMAccelQueueReturnStatus;

struct VMAccelEventReturnStatus {
   int errno;
   union {
      VMAccelEventStatus *ret;
   } VMAccelEventReturnStatus_u;
};
typedef struct VMAccelEventReturnStatus VMAccelEventReturnStatus;

struct VMAccelFenceReturnStatus {
   int errno;
   union {
      VMAccelFenceStatus *ret;
   } VMAccelFenceReturnStatus_u;
};
typedef struct VMAccelFenceReturnStatus VMAccelFenceReturnStatus;

struct VMAccelSurfaceAllocateReturnStatus {
   int errno;
   union {
      VMAccelSurfaceAllocateStatus *ret;
   } VMAccelSurfaceAllocateReturnStatus_u;
};
typedef struct VMAccelSurfaceAllocateReturnStatus
   VMAccelSurfaceAllocateReturnStatus;

struct VMAccelSharedHandleReturnStatus {
   int errno;
   union {
      VMAccelSharedHandleStatus *ret;
   } VMAccelSharedHandleReturnStatus_u;
};
typedef struct VMAccelSharedHandleReturnStatus VMAccelSharedHandleReturnStatus;

struct VMAccelDownloadReturnStatus {
   int errno;
   union {
      VMAccelDownloadStatus *ret;
   } VMAccelDownloadReturnStatus_u;
};
typedef struct VMAccelDownloadReturnStatus VMAccelDownloadReturnStatus;

struct VMAccelSurfaceMapReturnStatus {
   int errno;
   union {
      VMAccelSurfaceMapStatus *ret;
   } VMAccelSurfaceMapReturnStatus_u;
};
typedef struct VMAccelSurfaceMapReturnStatus VMAccelSurfaceMapReturnStatus;

struct VMAccelComputeReturnStatus {
   int errno;
   union {
      VMAccelComputeStatus *ret;
   } VMAccelComputeReturnStatus_u;
};
typedef struct VMAccelComputeReturnStatus VMAccelComputeReturnStatus;

#define VMACCEL 0x20000079
#define VMACCEL_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define VMACCEL_RESOURCEALLOC 1
VMAccelResourceAllocateReturnStatus *
vmaccel_resourcealloc_1(VMAccelResourceDesc *, CLIENT *);
VMAccelResourceAllocateReturnStatus *
vmaccel_resourcealloc_1_svc(VMAccelResourceDesc *, struct svc_req *);
#define VMACCEL_RESOURCERELEASE 2
VMAccelReturnStatus *vmaccel_resourcerelease_1(VMAccelId *, CLIENT *);
VMAccelReturnStatus *vmaccel_resourcerelease_1_svc(VMAccelId *,
                                                   struct svc_req *);
#define VMACCEL_COMPUTE 3
VMAccelComputeReturnStatus *vmaccel_compute_1(VMAccelComputeOp *, CLIENT *);
VMAccelComputeReturnStatus *vmaccel_compute_1_svc(VMAccelComputeOp *,
                                                  struct svc_req *);
int vmaccel_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define VMACCEL_RESOURCEALLOC 1
VMAccelResourceAllocateReturnStatus *vmaccel_resourcealloc_1();
VMAccelResourceAllocateReturnStatus *vmaccel_resourcealloc_1_svc();
#define VMACCEL_RESOURCERELEASE 2
VMAccelReturnStatus *vmaccel_resourcerelease_1();
VMAccelReturnStatus *vmaccel_resourcerelease_1_svc();
#define VMACCEL_COMPUTE 3
VMAccelComputeReturnStatus *vmaccel_compute_1();
VMAccelComputeReturnStatus *vmaccel_compute_1_svc();
int vmaccel_1_freeresult();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
bool_t xdr_VMAccelStatusCode(XDR *, VMAccelStatusCode *);
bool_t xdr_VMAccelResourceType(XDR *, VMAccelResourceType *);
bool_t xdr_VMAccelArchitectureType(XDR *, VMAccelArchitectureType *);
bool_t xdr_VMAccelSelectionMask(XDR *, VMAccelSelectionMask *);
bool_t xdr_VMAccelId(XDR *, VMAccelId *);
bool_t xdr_VMAccelCaps(XDR *, VMAccelCaps *);
bool_t xdr_VMAccelSurfaceType(XDR *, VMAccelSurfaceType *);
bool_t xdr_VMAccelSurfaceUsage(XDR *, VMAccelSurfaceUsage *);
bool_t xdr_VMAccelSurfaceMapFlags(XDR *, VMAccelSurfaceMapFlags *);
bool_t xdr_VMAccelSurfaceReadConsistency(XDR *,
                                         VMAccelSurfaceReadConsistency *);
bool_t xdr_VMAccelSurfaceWriteConsistency(XDR *,
                                          VMAccelSurfaceWriteConsistency *);
bool_t xdr_VMAccelFormatCaps(XDR *, VMAccelFormatCaps *);
bool_t xdr_VMAccelSurfaceBindFlags(XDR *, VMAccelSurfaceBindFlags *);
bool_t xdr_VMAccelSurfaceFormat(XDR *, VMAccelSurfaceFormat *);
bool_t xdr_VMAccelSurfaceFormatCaps(XDR *, VMAccelSurfaceFormatCaps *);
bool_t xdr_VMAccelStatus(XDR *, VMAccelStatus *);
bool_t xdr_VMAccelAddress(XDR *, VMAccelAddress *);
bool_t xdr_VMAccelCallback(XDR *, VMAccelCallback *);
bool_t xdr_VMAccelFormatDesc(XDR *, VMAccelFormatDesc *);
bool_t xdr_VMAccelWorkloadDesc(XDR *, VMAccelWorkloadDesc *);
bool_t xdr_VMAccelDesc(XDR *, VMAccelDesc *);
bool_t xdr_VMAccelResourceDesc(XDR *, VMAccelResourceDesc *);
bool_t xdr_VMAccelAllocateStatus(XDR *, VMAccelAllocateStatus *);
bool_t xdr_VMAccelRegisterDesc(XDR *, VMAccelRegisterDesc *);
bool_t xdr_VMAccelResourceAllocateStatus(XDR *,
                                         VMAccelResourceAllocateStatus *);
bool_t xdr_VMAccelRegisterAllocationDesc(XDR *,
                                         VMAccelRegisterAllocationDesc *);
bool_t xdr_VMAccelRegisterStatus(XDR *, VMAccelRegisterStatus *);
bool_t xdr_VMAccelElementDouble4D(XDR *, VMAccelElementDouble4D *);
bool_t xdr_VMAccelElementFloat4D(XDR *, VMAccelElementFloat4D *);
bool_t xdr_VMAccelElementUINT4D(XDR *, VMAccelElementUINT4D *);
bool_t xdr_VMAccelCoordinate2DUINT(XDR *, VMAccelCoordinate2DUINT *);
bool_t xdr_VMAccelCoordinate3DUINT(XDR *, VMAccelCoordinate3DUINT *);
bool_t xdr_VMAccelCoordinate4DUINT(XDR *, VMAccelCoordinate4DUINT *);
bool_t xdr_VMAccelSurfaceDesc(XDR *, VMAccelSurfaceDesc *);
bool_t xdr_VMAccelHandleType(XDR *, VMAccelHandleType *);
bool_t xdr_VMAccelSurfaceId(XDR *, VMAccelSurfaceId *);
bool_t xdr_VMAccelSurfaceAllocateStatus(XDR *, VMAccelSurfaceAllocateStatus *);
bool_t xdr_VMAccelSharedHandleStatus(XDR *, VMAccelSharedHandleStatus *);
bool_t xdr_VMAccelQueueFlags(XDR *, VMAccelQueueFlags *);
bool_t xdr_VMAccelQueueDesc(XDR *, VMAccelQueueDesc *);
bool_t xdr_VMAccelQueueStatus(XDR *, VMAccelQueueStatus *);
bool_t xdr_VMAccelEnqueuedStatusCode(XDR *, VMAccelEnqueuedStatusCode *);
bool_t xdr_VMAccelEventType(XDR *, VMAccelEventType *);
bool_t xdr_VMAccelEventId(XDR *, VMAccelEventId *);
bool_t xdr_VMAccelEventDesc(XDR *, VMAccelEventDesc *);
bool_t xdr_VMAccelEventStatus(XDR *, VMAccelEventStatus *);
bool_t xdr_VMAccelFenceType(XDR *, VMAccelFenceType *);
bool_t xdr_VMAccelFenceDesc(XDR *, VMAccelFenceDesc *);
bool_t xdr_VMAccelFenceStatus(XDR *, VMAccelFenceStatus *);
bool_t xdr_VMAccelSurfaceRegion(XDR *, VMAccelSurfaceRegion *);
bool_t xdr_VMAccelSurfaceCopyOp(XDR *, VMAccelSurfaceCopyOp *);
bool_t xdr_VMAccelImageFillOp(XDR *, VMAccelImageFillOp *);
bool_t xdr_VMAccelImageTransferOp(XDR *, VMAccelImageTransferOp *);
bool_t xdr_VMAccelDMAStatus(XDR *, VMAccelDMAStatus *);
bool_t xdr_VMAccelDownloadStatus(XDR *, VMAccelDownloadStatus *);
bool_t xdr_VMAccelSurfaceMapOp(XDR *, VMAccelSurfaceMapOp *);
bool_t xdr_VMAccelSurfaceUnmapOp(XDR *, VMAccelSurfaceUnmapOp *);
bool_t xdr_VMAccelSurfaceMapStatus(XDR *, VMAccelSurfaceMapStatus *);
bool_t xdr_VMAccelComputeArgDesc(XDR *, VMAccelComputeArgDesc *);
bool_t xdr_VMAccelComputeOp(XDR *, VMAccelComputeOp *);
bool_t xdr_VMAccelComputeStatus(XDR *, VMAccelComputeStatus *);
bool_t xdr_VMAccelReturnStatus(XDR *, VMAccelReturnStatus *);
bool_t xdr_VMAccelAllocateReturnStatus(XDR *, VMAccelAllocateReturnStatus *);
bool_t
xdr_VMAccelResourceAllocateReturnStatus(XDR *,
                                        VMAccelResourceAllocateReturnStatus *);
bool_t xdr_VMAccelRegisterReturnStatus(XDR *, VMAccelRegisterReturnStatus *);
bool_t xdr_VMAccelQueueReturnStatus(XDR *, VMAccelQueueReturnStatus *);
bool_t xdr_VMAccelEventReturnStatus(XDR *, VMAccelEventReturnStatus *);
bool_t xdr_VMAccelFenceReturnStatus(XDR *, VMAccelFenceReturnStatus *);
bool_t
xdr_VMAccelSurfaceAllocateReturnStatus(XDR *,
                                       VMAccelSurfaceAllocateReturnStatus *);
bool_t xdr_VMAccelSharedHandleReturnStatus(XDR *,
                                           VMAccelSharedHandleReturnStatus *);
bool_t xdr_VMAccelDownloadReturnStatus(XDR *, VMAccelDownloadReturnStatus *);
bool_t xdr_VMAccelSurfaceMapReturnStatus(XDR *,
                                         VMAccelSurfaceMapReturnStatus *);
bool_t xdr_VMAccelComputeReturnStatus(XDR *, VMAccelComputeReturnStatus *);

#else /* K&R C */
bool_t xdr_VMAccelStatusCode();
bool_t xdr_VMAccelResourceType();
bool_t xdr_VMAccelArchitectureType();
bool_t xdr_VMAccelSelectionMask();
bool_t xdr_VMAccelId();
bool_t xdr_VMAccelCaps();
bool_t xdr_VMAccelSurfaceType();
bool_t xdr_VMAccelSurfaceUsage();
bool_t xdr_VMAccelSurfaceMapFlags();
bool_t xdr_VMAccelSurfaceReadConsistency();
bool_t xdr_VMAccelSurfaceWriteConsistency();
bool_t xdr_VMAccelFormatCaps();
bool_t xdr_VMAccelSurfaceBindFlags();
bool_t xdr_VMAccelSurfaceFormat();
bool_t xdr_VMAccelSurfaceFormatCaps();
bool_t xdr_VMAccelStatus();
bool_t xdr_VMAccelAddress();
bool_t xdr_VMAccelCallback();
bool_t xdr_VMAccelFormatDesc();
bool_t xdr_VMAccelWorkloadDesc();
bool_t xdr_VMAccelDesc();
bool_t xdr_VMAccelResourceDesc();
bool_t xdr_VMAccelAllocateStatus();
bool_t xdr_VMAccelRegisterDesc();
bool_t xdr_VMAccelResourceAllocateStatus();
bool_t xdr_VMAccelRegisterAllocationDesc();
bool_t xdr_VMAccelRegisterStatus();
bool_t xdr_VMAccelElementDouble4D();
bool_t xdr_VMAccelElementFloat4D();
bool_t xdr_VMAccelElementUINT4D();
bool_t xdr_VMAccelCoordinate2DUINT();
bool_t xdr_VMAccelCoordinate3DUINT();
bool_t xdr_VMAccelCoordinate4DUINT();
bool_t xdr_VMAccelSurfaceDesc();
bool_t xdr_VMAccelHandleType();
bool_t xdr_VMAccelSurfaceId();
bool_t xdr_VMAccelSurfaceAllocateStatus();
bool_t xdr_VMAccelSharedHandleStatus();
bool_t xdr_VMAccelQueueFlags();
bool_t xdr_VMAccelQueueDesc();
bool_t xdr_VMAccelQueueStatus();
bool_t xdr_VMAccelEnqueuedStatusCode();
bool_t xdr_VMAccelEventType();
bool_t xdr_VMAccelEventId();
bool_t xdr_VMAccelEventDesc();
bool_t xdr_VMAccelEventStatus();
bool_t xdr_VMAccelFenceType();
bool_t xdr_VMAccelFenceDesc();
bool_t xdr_VMAccelFenceStatus();
bool_t xdr_VMAccelSurfaceRegion();
bool_t xdr_VMAccelSurfaceCopyOp();
bool_t xdr_VMAccelImageFillOp();
bool_t xdr_VMAccelImageTransferOp();
bool_t xdr_VMAccelDMAStatus();
bool_t xdr_VMAccelDownloadStatus();
bool_t xdr_VMAccelSurfaceMapOp();
bool_t xdr_VMAccelSurfaceUnmapOp();
bool_t xdr_VMAccelSurfaceMapStatus();
bool_t xdr_VMAccelComputeArgDesc();
bool_t xdr_VMAccelComputeOp();
bool_t xdr_VMAccelComputeStatus();
bool_t xdr_VMAccelReturnStatus();
bool_t xdr_VMAccelAllocateReturnStatus();
bool_t xdr_VMAccelResourceAllocateReturnStatus();
bool_t xdr_VMAccelRegisterReturnStatus();
bool_t xdr_VMAccelQueueReturnStatus();
bool_t xdr_VMAccelEventReturnStatus();
bool_t xdr_VMAccelFenceReturnStatus();
bool_t xdr_VMAccelSurfaceAllocateReturnStatus();
bool_t xdr_VMAccelSharedHandleReturnStatus();
bool_t xdr_VMAccelDownloadReturnStatus();
bool_t xdr_VMAccelSurfaceMapReturnStatus();
bool_t xdr_VMAccelComputeReturnStatus();

#endif /* K&R C */

#endif /* !_VMACCEL_RPC_H_RPCGEN */
